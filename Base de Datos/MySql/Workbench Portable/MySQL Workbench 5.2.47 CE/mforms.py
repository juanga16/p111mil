# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mforms', [dirname(__file__)])
        except ImportError:
            import _mforms
            return _mforms
        if fp is not None:
            try:
                _mod = imp.load_module('_mforms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mforms = swig_import_helper()
    del swig_import_helper
else:
    import _mforms
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mforms.SwigPyIterator_value(self)
    def incr(self, n = 1): return _mforms.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _mforms.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mforms.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mforms.SwigPyIterator_equal(self, *args)
    def copy(self): return _mforms.SwigPyIterator_copy(self)
    def next(self): return _mforms.SwigPyIterator_next(self)
    def __next__(self): return _mforms.SwigPyIterator___next__(self)
    def previous(self): return _mforms.SwigPyIterator_previous(self)
    def advance(self, *args): return _mforms.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mforms.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mforms.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mforms.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mforms.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mforms.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mforms.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mforms.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleList, name)
    __repr__ = _swig_repr
    def iterator(self): return _mforms.doubleList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mforms.doubleList___nonzero__(self)
    def __bool__(self): return _mforms.doubleList___bool__(self)
    def __len__(self): return _mforms.doubleList___len__(self)
    def pop(self): return _mforms.doubleList_pop(self)
    def __getslice__(self, *args): return _mforms.doubleList___getslice__(self, *args)
    def __setslice__(self, *args): return _mforms.doubleList___setslice__(self, *args)
    def __delslice__(self, *args): return _mforms.doubleList___delslice__(self, *args)
    def __delitem__(self, *args): return _mforms.doubleList___delitem__(self, *args)
    def __getitem__(self, *args): return _mforms.doubleList___getitem__(self, *args)
    def __setitem__(self, *args): return _mforms.doubleList___setitem__(self, *args)
    def append(self, *args): return _mforms.doubleList_append(self, *args)
    def empty(self): return _mforms.doubleList_empty(self)
    def size(self): return _mforms.doubleList_size(self)
    def clear(self): return _mforms.doubleList_clear(self)
    def swap(self, *args): return _mforms.doubleList_swap(self, *args)
    def get_allocator(self): return _mforms.doubleList_get_allocator(self)
    def begin(self): return _mforms.doubleList_begin(self)
    def end(self): return _mforms.doubleList_end(self)
    def rbegin(self): return _mforms.doubleList_rbegin(self)
    def rend(self): return _mforms.doubleList_rend(self)
    def pop_back(self): return _mforms.doubleList_pop_back(self)
    def erase(self, *args): return _mforms.doubleList_erase(self, *args)
    def __init__(self, *args): 
        this = _mforms.new_doubleList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mforms.doubleList_push_back(self, *args)
    def front(self): return _mforms.doubleList_front(self)
    def back(self): return _mforms.doubleList_back(self)
    def assign(self, *args): return _mforms.doubleList_assign(self, *args)
    def resize(self, *args): return _mforms.doubleList_resize(self, *args)
    def insert(self, *args): return _mforms.doubleList_insert(self, *args)
    def pop_front(self): return _mforms.doubleList_pop_front(self)
    def push_front(self, *args): return _mforms.doubleList_push_front(self, *args)
    def reverse(self): return _mforms.doubleList_reverse(self)
    __swig_destroy__ = _mforms.delete_doubleList
    __del__ = lambda self : None;
doubleList_swigregister = _mforms.doubleList_swigregister
doubleList_swigregister(doubleList)

def newLabel(*args):
    c = Label(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newButton(*args):
    c = Button(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newCheckBox(*args):
    c = CheckBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newCodeEditor(*args):
    c = CodeEditor(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTextEntry(*args):
    c = TextEntry(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTextBox(*args):
    c = TextBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newSelector(*args):
    c = Selector(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newListBox(*args):
    c = ListBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTabView(*args):
    c = TabView(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newBox(*args):
    c = Box(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newPanel(*args):
    c = Panel(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newFileChooser(*args):
    c = FileChooser(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newRadioButton(*args):
    c = RadioButton(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newImageBox(*args):
    c = ImageBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newProgressBar(*args):
    c = ProgressBar(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTable(*args):
    c = Table(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newScrollPanel(*args):
    c = ScrollPanel(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTreeNodeView(*args):
    c = TreeNodeView(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newAppView(*args):
    c = AppView(*args)
    return c

def newDrawBox(*args):
    c = DrawBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTabSwitcher(*args):
    c = TabSwitcher(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newSectionBox(*args):
    c = SectionBox(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newWidgetSeparator(*args):
    c = WidgetSeparator(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newWidgetContainer(*args):
    c = WidgetContainer(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newHeartbeatWidget(*args):
    c = HeartbeatWidget(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newServerInfoWidget(*args):
    c = ServerInfoWidget(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newBarGraphWidget(*args):
    c = BarGraphWidget(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newLineDiagramWidget(*args):
    c = LineDiagramWidget(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newWebBrowser(*args):
    c = WebBrowser(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newPopup(*args):
    c = Popup(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newSplitter(*args):
    c = Splitter(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newTaskSidebar(*args):
    c = TaskSidebar.create(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newGrid(*args):
    c = Grid(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newHyperText(*args):
    c = HyperText(*args)
    c.set_managed()
    c.set_release_on_add()
    return c

def newMenu(*args):
    c = Menu(*args)
    c.set_managed()
    return c

def newToolBar(*args):
    c = ToolBar(*args)
    c.set_managed()
    return c

def newToolBarItem(*args):
    c = ToolBarItem(*args)
    c.set_managed()
    return c


class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def retain(self): return _mforms.Object_retain(self)
    def release(self): return _mforms.Object_release(self)
    def set_managed(self): return _mforms.Object_set_managed(self)
    def set_release_on_add(self): return _mforms.Object_set_release_on_add(self)
    def is_managed(self): return _mforms.Object_is_managed(self)
    def release_on_add(self): return _mforms.Object_release_on_add(self)
    def retain_count(self): return _mforms.Object_retain_count(self)
    def set_destroying(self): return _mforms.Object_set_destroying(self)
    def is_destroying(self): return _mforms.Object_is_destroying(self)
    def __init__(self): 
        this = _mforms.new_Object()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _mforms.Object_swigregister
Object_swigregister(Object)

ResizeNone = _mforms.ResizeNone
ResizeVertical = _mforms.ResizeVertical
ResizeHorizontal = _mforms.ResizeHorizontal
ResizeBoth = _mforms.ResizeBoth
BottomLeft = _mforms.BottomLeft
BottomCenter = _mforms.BottomCenter
BottomRight = _mforms.BottomRight
MiddleLeft = _mforms.MiddleLeft
MiddleCenter = _mforms.MiddleCenter
MiddleRight = _mforms.MiddleRight
TopLeft = _mforms.TopLeft
TopCenter = _mforms.TopCenter
TopRight = _mforms.TopRight
WizardLabelAlignment = _mforms.WizardLabelAlignment
class TextAttributes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextAttributes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextAttributes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TextAttributes
    __del__ = lambda self : None;
TextAttributes_swigregister = _mforms.TextAttributes_swigregister
TextAttributes_swigregister(TextAttributes)

MouseButtonLeft = _mforms.MouseButtonLeft
MouseButtonRight = _mforms.MouseButtonRight
MouseButtonMiddle = _mforms.MouseButtonMiddle
MouseButtonNone = _mforms.MouseButtonNone
class View(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_View
    __del__ = lambda self : None;
    def find_subview(self, *args): return _mforms.View_find_subview(self, *args)
    def contains_subview(self, *args): return _mforms.View_contains_subview(self, *args)
    def clear_subviews(self): return _mforms.View_clear_subviews(self)
    def get_resize_mode(self): return _mforms.View_get_resize_mode(self)
    def set_resize_mode(self, *args): return _mforms.View_set_resize_mode(self, *args)
    def signal_resized(self): return _mforms.View_signal_resized(self)
    def set_name(self, *args): return _mforms.View_set_name(self, *args)
    def set_tooltip(self, *args): return _mforms.View_set_tooltip(self, *args)
    def set_font(self, *args): return _mforms.View_set_font(self, *args)
    def get_name(self): return _mforms.View_get_name(self)
    def set_parent(self, *args): return _mforms.View_set_parent(self, *args)
    def get_parent(self): return _mforms.View_get_parent(self)
    def get_parent_form(self): return _mforms.View_get_parent_form(self)
    def get_width(self): return _mforms.View_get_width(self)
    def get_height(self): return _mforms.View_get_height(self)
    def get_preferred_width(self): return _mforms.View_get_preferred_width(self)
    def get_preferred_height(self): return _mforms.View_get_preferred_height(self)
    def get_x(self): return _mforms.View_get_x(self)
    def get_y(self): return _mforms.View_get_y(self)
    def set_position(self, *args): return _mforms.View_set_position(self, *args)
    def set_size(self, *args): return _mforms.View_set_size(self, *args)
    def client_to_screen(self, *args): return _mforms.View_client_to_screen(self, *args)
    def show(self, flag = True): return _mforms.View_show(self, flag)
    def is_shown(self): return _mforms.View_is_shown(self)
    def set_enabled(self, *args): return _mforms.View_set_enabled(self, *args)
    def is_enabled(self): return _mforms.View_is_enabled(self)
    def set_needs_repaint(self): return _mforms.View_set_needs_repaint(self)
    def relayout(self): return _mforms.View_relayout(self)
    def set_layout_dirty(self, *args): return _mforms.View_set_layout_dirty(self, *args)
    def is_layout_dirty(self): return _mforms.View_is_layout_dirty(self)
    def suspend_layout(self): return _mforms.View_suspend_layout(self)
    def resume_layout(self): return _mforms.View_resume_layout(self)
    def set_front_color(self, *args): return _mforms.View_set_front_color(self, *args)
    def get_front_color(self): return _mforms.View_get_front_color(self)
    def set_back_color(self, *args): return _mforms.View_set_back_color(self, *args)
    def get_back_color(self): return _mforms.View_get_back_color(self)
    def show_retain_counts(self, depth = 0): return _mforms.View_show_retain_counts(self, depth)
    def get_string_value(self): return _mforms.View_get_string_value(self)
    def get_int_value(self): return _mforms.View_get_int_value(self)
    def get_bool_value(self): return _mforms.View_get_bool_value(self)
    def flush_events(self): return _mforms.View_flush_events(self)
    def focus(self): return _mforms.View_focus(self)
View_swigregister = _mforms.View_swigregister
View_swigregister(View)

class Container(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Container()
        try: self.this.append(this)
        except: self.this = this
    def set_padding(self, *args): return _mforms.Container_set_padding(self, *args)
    def set_back_image(self, *args): return _mforms.Container_set_back_image(self, *args)
    __swig_destroy__ = _mforms.delete_Container
    __del__ = lambda self : None;
Container_swigregister = _mforms.Container_swigregister
Container_swigregister(Container)

TOP_FORM_PADDING = _mforms.TOP_FORM_PADDING
FormNone = _mforms.FormNone
FormSingleFrame = _mforms.FormSingleFrame
FormDialogFrame = _mforms.FormDialogFrame
FormResizable = _mforms.FormResizable
FormMinimizable = _mforms.FormMinimizable
FormHideOnClose = _mforms.FormHideOnClose
FormStayOnTop = _mforms.FormStayOnTop
FormToolWindow = _mforms.FormToolWindow
class Form(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Form, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Form, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Form(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Form
    __del__ = lambda self : None;
    __swig_getmethods__["main_form"] = lambda x: _mforms.Form_main_form
    if _newclass:main_form = staticmethod(_mforms.Form_main_form)
    def set_content(self, *args): return _mforms.Form_set_content(self, *args)
    def set_title(self, *args): return _mforms.Form_set_title(self, *args)
    def show_modal(self, *args): return _mforms.Form_show_modal(self, *args)
    def run_modal(self, *args): return _mforms.Form_run_modal(self, *args)
    def end_modal(self, *args): return _mforms.Form_end_modal(self, *args)
    def close(self): return _mforms.Form_close(self)
    def center(self): return _mforms.Form_center(self)
    def set_release_on_close(self, *args): return _mforms.Form_set_release_on_close(self, *args)
    def was_closed(self): return _mforms.Form_was_closed(self)
    def add_closed_callback(self, *args): return _mforms.Form_add_closed_callback(self, *args)
    def call_closed_callback(self): return _mforms.Form_call_closed_callback(self)
Form_swigregister = _mforms.Form_swigregister
Form_swigregister(Form)

def Form_main_form():
  return _mforms.Form_main_form()
Form_main_form = _mforms.Form_main_form

PushButton = _mforms.PushButton
ToolButton = _mforms.ToolButton
AdminActionButton = _mforms.AdminActionButton
SmallButton = _mforms.SmallButton
class Button(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Button, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Button, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Button(*args)
        try: self.this.append(this)
        except: self.this = this
    def enable_internal_padding(self, *args): return _mforms.Button_enable_internal_padding(self, *args)
    def set_text(self, *args): return _mforms.Button_set_text(self, *args)
    def set_icon(self, *args): return _mforms.Button_set_icon(self, *args)
    def add_clicked_callback(self, *args): return _mforms.Button_add_clicked_callback(self, *args)
    def call_clicked_callback(self): return _mforms.Button_call_clicked_callback(self)
    __swig_destroy__ = _mforms.delete_Button
    __del__ = lambda self : None;
Button_swigregister = _mforms.Button_swigregister
Button_swigregister(Button)

class CheckBox(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_CheckBox()
        try: self.this.append(this)
        except: self.this = this
    def set_active(self, *args): return _mforms.CheckBox_set_active(self, *args)
    def get_active(self): return _mforms.CheckBox_get_active(self)
    __swig_destroy__ = _mforms.delete_CheckBox
    __del__ = lambda self : None;
CheckBox_swigregister = _mforms.CheckBox_swigregister
CheckBox_swigregister(CheckBox)

NormalEntry = _mforms.NormalEntry
PasswordEntry = _mforms.PasswordEntry
SearchEntry = _mforms.SearchEntry
SmallSearchEntry = _mforms.SmallSearchEntry
EntryActivate = _mforms.EntryActivate
EntryKeyUp = _mforms.EntryKeyUp
EntryKeyDown = _mforms.EntryKeyDown
EntryCKeyUp = _mforms.EntryCKeyUp
EntryCKeyDown = _mforms.EntryCKeyDown
class TextEntry(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_max_length(self, *args): return _mforms.TextEntry_set_max_length(self, *args)
    def set_value(self, *args): return _mforms.TextEntry_set_value(self, *args)
    def set_read_only(self, *args): return _mforms.TextEntry_set_read_only(self, *args)
    def set_placeholder_text(self, *args): return _mforms.TextEntry_set_placeholder_text(self, *args)
    def add_changed_callback(self, *args): return _mforms.TextEntry_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TextEntry_call_changed_callback(self)
    def add_action_callback(self, *args): return _mforms.TextEntry_add_action_callback(self, *args)
    __swig_destroy__ = _mforms.delete_TextEntry
    __del__ = lambda self : None;
TextEntry_swigregister = _mforms.TextEntry_swigregister
TextEntry_swigregister(TextEntry)

NoScrollBar = _mforms.NoScrollBar
HorizontalScrollBar = _mforms.HorizontalScrollBar
VerticalScrollBar = _mforms.VerticalScrollBar
BothScrollBars = _mforms.BothScrollBars
SmallScrollBars = _mforms.SmallScrollBars
KeyNone = _mforms.KeyNone
KeyChar = _mforms.KeyChar
KeyModifierOnly = _mforms.KeyModifierOnly
KeyEnter = _mforms.KeyEnter
KeyReturn = _mforms.KeyReturn
KeyHome = _mforms.KeyHome
KeyEnd = _mforms.KeyEnd
KeyPrevious = _mforms.KeyPrevious
KeyNext = _mforms.KeyNext
KeyUnkown = _mforms.KeyUnkown
class TextBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_bordered(self, *args): return _mforms.TextBox_set_bordered(self, *args)
    def set_monospaced(self, *args): return _mforms.TextBox_set_monospaced(self, *args)
    def set_read_only(self, *args): return _mforms.TextBox_set_read_only(self, *args)
    def set_value(self, *args): return _mforms.TextBox_set_value(self, *args)
    def get_selected_range(self, *args): return _mforms.TextBox_get_selected_range(self, *args)
    def append_text_and_scroll(self, *args): return _mforms.TextBox_append_text_and_scroll(self, *args)
    def append_text(self, *args): return _mforms.TextBox_append_text(self, *args)
    def append_text_with_encoding_and_scroll(self, *args): return _mforms.TextBox_append_text_with_encoding_and_scroll(self, *args)
    def append_text_with_encoding(self, *args): return _mforms.TextBox_append_text_with_encoding(self, *args)
    def set_padding(self, *args): return _mforms.TextBox_set_padding(self, *args)
    def clear(self): return _mforms.TextBox_clear(self)
    def add_changed_callback(self, *args): return _mforms.TextBox_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TextBox_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_TextBox
    __del__ = lambda self : None;
TextBox_swigregister = _mforms.TextBox_swigregister
TextBox_swigregister(TextBox)

NormalStyle = _mforms.NormalStyle
BoldStyle = _mforms.BoldStyle
SmallBoldStyle = _mforms.SmallBoldStyle
BigStyle = _mforms.BigStyle
BigBoldStyle = _mforms.BigBoldStyle
SmallStyle = _mforms.SmallStyle
VerySmallStyle = _mforms.VerySmallStyle
InfoCaptionStyle = _mforms.InfoCaptionStyle
BoldInfoCaptionStyle = _mforms.BoldInfoCaptionStyle
WizardHeadingStyle = _mforms.WizardHeadingStyle
SmallHelpTextStyle = _mforms.SmallHelpTextStyle
class Label(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_wrap_text(self, *args): return _mforms.Label_set_wrap_text(self, *args)
    def set_text_align(self, *args): return _mforms.Label_set_text_align(self, *args)
    def set_text(self, *args): return _mforms.Label_set_text(self, *args)
    def set_style(self, *args): return _mforms.Label_set_style(self, *args)
    def set_color(self, *args): return _mforms.Label_set_color(self, *args)
    __swig_destroy__ = _mforms.delete_Label
    __del__ = lambda self : None;
Label_swigregister = _mforms.Label_swigregister
Label_swigregister(Label)

SelectorCombobox = _mforms.SelectorCombobox
SelectorPopup = _mforms.SelectorPopup
class Selector(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selector, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Selector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Selector(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _mforms.Selector_clear(self)
    def add_item(self, *args): return _mforms.Selector_add_item(self, *args)
    def add_items(self, *args): return _mforms.Selector_add_items(self, *args)
    def get_item_title(self, *args): return _mforms.Selector_get_item_title(self, *args)
    def set_selected(self, *args): return _mforms.Selector_set_selected(self, *args)
    def index_of_item_with_title(self, *args): return _mforms.Selector_index_of_item_with_title(self, *args)
    def get_selected_index(self): return _mforms.Selector_get_selected_index(self)
    def set_value(self, *args): return _mforms.Selector_set_value(self, *args)
    def get_item_count(self): return _mforms.Selector_get_item_count(self)
    def add_changed_callback(self, *args): return _mforms.Selector_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.Selector_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_Selector
    __del__ = lambda self : None;
Selector_swigregister = _mforms.Selector_swigregister
Selector_swigregister(Selector)

class ListBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ListBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _mforms.ListBox_clear(self)
    def set_heading(self, *args): return _mforms.ListBox_set_heading(self, *args)
    def add_item(self, *args): return _mforms.ListBox_add_item(self, *args)
    def add_items(self, *args): return _mforms.ListBox_add_items(self, *args)
    def set_selected(self, *args): return _mforms.ListBox_set_selected(self, *args)
    def get_selected_index(self): return _mforms.ListBox_get_selected_index(self)
    def get_selected_indices(self): return _mforms.ListBox_get_selected_indices(self)
    def add_changed_callback(self, *args): return _mforms.ListBox_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.ListBox_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_ListBox
    __del__ = lambda self : None;
ListBox_swigregister = _mforms.ListBox_swigregister
ListBox_swigregister(ListBox)

TabViewSystemStandard = _mforms.TabViewSystemStandard
TabViewTabless = _mforms.TabViewTabless
TabViewMainClosable = _mforms.TabViewMainClosable
TabViewDocument = _mforms.TabViewDocument
TabViewDocumentClosable = _mforms.TabViewDocumentClosable
TabViewPalette = _mforms.TabViewPalette
TabViewSelectorSecondary = _mforms.TabViewSelectorSecondary
class TabView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TabView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TabView
    __del__ = lambda self : None;
    def set_active_tab(self, *args): return _mforms.TabView_set_active_tab(self, *args)
    def get_active_tab(self): return _mforms.TabView_get_active_tab(self)
    def add_page(self, *args): return _mforms.TabView_add_page(self, *args)
    def remove_page(self, *args): return _mforms.TabView_remove_page(self, *args)
    def set_tab_title(self, *args): return _mforms.TabView_set_tab_title(self, *args)
    def get_page_index(self, *args): return _mforms.TabView_get_page_index(self, *args)
    def get_page(self, *args): return _mforms.TabView_get_page(self, *args)
    def can_close_tab(self, *args): return _mforms.TabView_can_close_tab(self, *args)
    def add_tab_changed_callback(self, *args): return _mforms.TabView_add_tab_changed_callback(self, *args)
    def call_tab_changed_callback(self): return _mforms.TabView_call_tab_changed_callback(self)
    def add_tab_closed_callback(self, *args): return _mforms.TabView_add_tab_closed_callback(self, *args)
    def call_tab_closed_callback(self, *args): return _mforms.TabView_call_tab_closed_callback(self, *args)
TabView_swigregister = _mforms.TabView_swigregister
TabView_swigregister(TabView)

class Box(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Box
    __del__ = lambda self : None;
    def add(self, *args): return _mforms.Box_add(self, *args)
    def add_end(self, *args): return _mforms.Box_add_end(self, *args)
    def remove(self, *args): return _mforms.Box_remove(self, *args)
    def set_homogeneous(self, *args): return _mforms.Box_set_homogeneous(self, *args)
    def set_spacing(self, *args): return _mforms.Box_set_spacing(self, *args)
    def is_horizontal(self): return _mforms.Box_is_horizontal(self)
Box_swigregister = _mforms.Box_swigregister
Box_swigregister(Box)

TransparentPanel = _mforms.TransparentPanel
FilledPanel = _mforms.FilledPanel
BorderedPanel = _mforms.BorderedPanel
LineBorderPanel = _mforms.LineBorderPanel
TitledBoxPanel = _mforms.TitledBoxPanel
TitledGroupPanel = _mforms.TitledGroupPanel
CheckBoxTitlePanel = _mforms.CheckBoxTitlePanel
FilledHeaderPanel = _mforms.FilledHeaderPanel
StyledHeaderPanel = _mforms.StyledHeaderPanel
class Panel(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Panel, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Panel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Panel
    __del__ = lambda self : None;
    def set_title(self, *args): return _mforms.Panel_set_title(self, *args)
    def set_back_color(self, *args): return _mforms.Panel_set_back_color(self, *args)
    def set_active(self, *args): return _mforms.Panel_set_active(self, *args)
    def get_active(self): return _mforms.Panel_get_active(self)
    def add(self, *args): return _mforms.Panel_add(self, *args)
    def remove(self, *args): return _mforms.Panel_remove(self, *args)
    def add_toggled_callback(self, *args): return _mforms.Panel_add_toggled_callback(self, *args)
    def call_toggled_callback(self): return _mforms.Panel_call_toggled_callback(self)
Panel_swigregister = _mforms.Panel_swigregister
Panel_swigregister(Panel)

MainToolBar = _mforms.MainToolBar
SecondaryToolBar = _mforms.SecondaryToolBar
ToolPickerToolBar = _mforms.ToolPickerToolBar
OptionsToolBar = _mforms.OptionsToolBar
PaletteToolBar = _mforms.PaletteToolBar
LabelItem = _mforms.LabelItem
ActionItem = _mforms.ActionItem
TextActionItem = _mforms.TextActionItem
ToggleItem = _mforms.ToggleItem
SegmentedToggleItem = _mforms.SegmentedToggleItem
SearchFieldItem = _mforms.SearchFieldItem
SelectorItem = _mforms.SelectorItem
ColorSelectorItem = _mforms.ColorSelectorItem
SeparatorItem = _mforms.SeparatorItem
ExpanderItem = _mforms.ExpanderItem
ImageBoxItem = _mforms.ImageBoxItem
class ToolBar(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolBar, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolBar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ToolBar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_ToolBar
    __del__ = lambda self : None;
    def get_type(self): return _mforms.ToolBar_get_type(self)
    def get_items(self): return _mforms.ToolBar_get_items(self)
    def find_item(self, *args): return _mforms.ToolBar_find_item(self, *args)
    def set_item_enabled(self, *args): return _mforms.ToolBar_set_item_enabled(self, *args)
    def set_item_checked(self, *args): return _mforms.ToolBar_set_item_checked(self, *args)
    def get_item_checked(self, *args): return _mforms.ToolBar_get_item_checked(self, *args)
    def add_item(self, *args): return _mforms.ToolBar_add_item(self, *args)
    def insert_item(self, *args): return _mforms.ToolBar_insert_item(self, *args)
    def remove_all(self): return _mforms.ToolBar_remove_all(self)
    def remove_item(self, *args): return _mforms.ToolBar_remove_item(self, *args)
    def validate(self): return _mforms.ToolBar_validate(self)
ToolBar_swigregister = _mforms.ToolBar_swigregister
ToolBar_swigregister(ToolBar)

class ToolBarItem(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolBarItem, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolBarItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ToolBarItem(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_type(self): return _mforms.ToolBarItem_get_type(self)
    def get_expandable(self): return _mforms.ToolBarItem_get_expandable(self)
    def set_text(self, *args): return _mforms.ToolBarItem_set_text(self, *args)
    def get_text(self): return _mforms.ToolBarItem_get_text(self)
    def set_tooltip(self, *args): return _mforms.ToolBarItem_set_tooltip(self, *args)
    def set_icon(self, *args): return _mforms.ToolBarItem_set_icon(self, *args)
    def set_alt_icon(self, *args): return _mforms.ToolBarItem_set_alt_icon(self, *args)
    def set_enabled(self, *args): return _mforms.ToolBarItem_set_enabled(self, *args)
    def get_enabled(self): return _mforms.ToolBarItem_get_enabled(self)
    def set_checked(self, *args): return _mforms.ToolBarItem_set_checked(self, *args)
    def get_checked(self): return _mforms.ToolBarItem_get_checked(self)
    def signal_activated(self): return _mforms.ToolBarItem_signal_activated(self)
    def set_name(self, *args): return _mforms.ToolBarItem_set_name(self, *args)
    def get_name(self): return _mforms.ToolBarItem_get_name(self)
    def set_selector_items(self, *args): return _mforms.ToolBarItem_set_selector_items(self, *args)
    def set_validator(self, *args): return _mforms.ToolBarItem_set_validator(self, *args)
    def set_search_handler(self, *args): return _mforms.ToolBarItem_set_search_handler(self, *args)
    def callback(self): return _mforms.ToolBarItem_callback(self)
    def validate(self): return _mforms.ToolBarItem_validate(self)
    def search(self, *args): return _mforms.ToolBarItem_search(self, *args)
    def add_activated_callback(self, *args): return _mforms.ToolBarItem_add_activated_callback(self, *args)
    __swig_destroy__ = _mforms.delete_ToolBarItem
    __del__ = lambda self : None;
ToolBarItem_swigregister = _mforms.ToolBarItem_swigregister
ToolBarItem_swigregister(ToolBarItem)

OpenFile = _mforms.OpenFile
SaveFile = _mforms.SaveFile
OpenDirectory = _mforms.OpenDirectory
class FileChooser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileChooser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileChooser, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_selector_options"] = _mforms.FileChooser__selector_options_set
    __swig_getmethods__["_selector_options"] = _mforms.FileChooser__selector_options_get
    if _newclass:_selector_options = _swig_property(_mforms.FileChooser__selector_options_get, _mforms.FileChooser__selector_options_set)
    def split_extensions(self, *args): return _mforms.FileChooser_split_extensions(self, *args)
    def __init__(self, *args): 
        this = _mforms.new_FileChooser(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_title(self, *args): return _mforms.FileChooser_set_title(self, *args)
    def run_modal(self): return _mforms.FileChooser_run_modal(self)
    def set_directory(self, *args): return _mforms.FileChooser_set_directory(self, *args)
    def set_path(self, *args): return _mforms.FileChooser_set_path(self, *args)
    def get_path(self): return _mforms.FileChooser_get_path(self)
    def get_directory(self): return _mforms.FileChooser_get_directory(self)
    def set_extensions(self, *args): return _mforms.FileChooser_set_extensions(self, *args)
    def add_selector_option(self, *args): return _mforms.FileChooser_add_selector_option(self, *args)
    def get_selector_option_value(self, *args): return _mforms.FileChooser_get_selector_option_value(self, *args)
    __swig_destroy__ = _mforms.delete_FileChooser
    __del__ = lambda self : None;
FileChooser_swigregister = _mforms.FileChooser_swigregister
FileChooser_swigregister(FileChooser)

class RadioButton(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadioButton, name)
    __repr__ = _swig_repr
    __swig_getmethods__["new_id"] = lambda x: _mforms.RadioButton_new_id
    if _newclass:new_id = staticmethod(_mforms.RadioButton_new_id)
    def __init__(self, *args): 
        this = _mforms.new_RadioButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def group_id(self): return _mforms.RadioButton_group_id(self)
    def set_active(self, *args): return _mforms.RadioButton_set_active(self, *args)
    def get_active(self): return _mforms.RadioButton_get_active(self)
    def add_clicked_callback(self, *args): return _mforms.RadioButton_add_clicked_callback(self, *args)
    def call_clicked_callback(self): return _mforms.RadioButton_call_clicked_callback(self)
    __swig_destroy__ = _mforms.delete_RadioButton
    __del__ = lambda self : None;
RadioButton_swigregister = _mforms.RadioButton_swigregister
RadioButton_swigregister(RadioButton)

def RadioButton_new_id():
  return _mforms.RadioButton_new_id()
RadioButton_new_id = _mforms.RadioButton_new_id

class ImageBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ImageBox()
        try: self.this.append(this)
        except: self.this = this
    def set_image(self, *args): return _mforms.ImageBox_set_image(self, *args)
    def set_scale_contents(self, *args): return _mforms.ImageBox_set_scale_contents(self, *args)
    def set_image_align(self, *args): return _mforms.ImageBox_set_image_align(self, *args)
    __swig_destroy__ = _mforms.delete_ImageBox
    __del__ = lambda self : None;
ImageBox_swigregister = _mforms.ImageBox_swigregister
ImageBox_swigregister(ImageBox)

class ProgressBar(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressBar, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressBar, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ProgressBar()
        try: self.this.append(this)
        except: self.this = this
    def set_indeterminate(self, *args): return _mforms.ProgressBar_set_indeterminate(self, *args)
    def start(self): return _mforms.ProgressBar_start(self)
    def stop(self): return _mforms.ProgressBar_stop(self)
    def set_value(self, *args): return _mforms.ProgressBar_set_value(self, *args)
    __swig_destroy__ = _mforms.delete_ProgressBar
    __del__ = lambda self : None;
ProgressBar_swigregister = _mforms.ProgressBar_swigregister
ProgressBar_swigregister(ProgressBar)

NoFillExpandFlag = _mforms.NoFillExpandFlag
VExpandFlag = _mforms.VExpandFlag
HExpandFlag = _mforms.HExpandFlag
VFillFlag = _mforms.VFillFlag
HFillFlag = _mforms.HFillFlag
FillAndExpand = _mforms.FillAndExpand

def __or__(*args):
  return _mforms.__or__(*args)
__or__ = _mforms.__or__
class Table(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Table
    __del__ = lambda self : None;
    def set_row_count(self, *args): return _mforms.Table_set_row_count(self, *args)
    def set_column_count(self, *args): return _mforms.Table_set_column_count(self, *args)
    def set_row_spacing(self, *args): return _mforms.Table_set_row_spacing(self, *args)
    def set_column_spacing(self, *args): return _mforms.Table_set_column_spacing(self, *args)
    def set_homogeneous(self, *args): return _mforms.Table_set_homogeneous(self, *args)
    def add(self, *args): return _mforms.Table_add(self, *args)
    def remove(self, *args): return _mforms.Table_remove(self, *args)
Table_swigregister = _mforms.Table_swigregister
Table_swigregister(Table)

ScrollPanelNoFlags = _mforms.ScrollPanelNoFlags
ScrollPanelBordered = _mforms.ScrollPanelBordered
ScrollPanelDrawBackground = _mforms.ScrollPanelDrawBackground
class ScrollPanel(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScrollPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScrollPanel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ScrollPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_ScrollPanel
    __del__ = lambda self : None;
    def set_visible_scrollers(self, *args): return _mforms.ScrollPanel_set_visible_scrollers(self, *args)
    def set_autohide_scrollers(self, *args): return _mforms.ScrollPanel_set_autohide_scrollers(self, *args)
    def add(self, *args): return _mforms.ScrollPanel_add(self, *args)
    def remove(self): return _mforms.ScrollPanel_remove(self)
    def scroll_to_view(self, *args): return _mforms.ScrollPanel_scroll_to_view(self, *args)
ScrollPanel_swigregister = _mforms.ScrollPanel_swigregister
ScrollPanel_swigregister(ScrollPanel)

class Wizard(Form):
    __swig_setmethods__ = {}
    for _s in [Form]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wizard, name, value)
    __swig_getmethods__ = {}
    for _s in [Form]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wizard, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Wizard(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Wizard
    __del__ = lambda self : None;
    def run(self): return _mforms.Wizard_run(self)
    def set_heading(self, *args): return _mforms.Wizard_set_heading(self, *args)
    def set_step_list(self, *args): return _mforms.Wizard_set_step_list(self, *args)
    def set_allow_cancel(self, *args): return _mforms.Wizard_set_allow_cancel(self, *args)
    def set_allow_back(self, *args): return _mforms.Wizard_set_allow_back(self, *args)
    def set_allow_next(self, *args): return _mforms.Wizard_set_allow_next(self, *args)
    def set_show_extra(self, *args): return _mforms.Wizard_set_show_extra(self, *args)
    def set_extra_caption(self, *args): return _mforms.Wizard_set_extra_caption(self, *args)
    def set_next_caption(self, caption = ""): return _mforms.Wizard_set_next_caption(self, caption)
    def add_next_callback(self, *args): return _mforms.Wizard_add_next_callback(self, *args)
    def call_next_callback(self): return _mforms.Wizard_call_next_callback(self)
    def add_back_callback(self, *args): return _mforms.Wizard_add_back_callback(self, *args)
    def call_back_callback(self): return _mforms.Wizard_call_back_callback(self)
    def add_extra_callback(self, *args): return _mforms.Wizard_add_extra_callback(self, *args)
    def call_extra_callback(self): return _mforms.Wizard_call_extra_callback(self)
Wizard_swigregister = _mforms.Wizard_swigregister
Wizard_swigregister(Wizard)

Documents = _mforms.Documents
Desktop = _mforms.Desktop
ApplicationData = _mforms.ApplicationData
WinProgramFiles = _mforms.WinProgramFiles
WinProgramFilesX86 = _mforms.WinProgramFilesX86
SessionStorePasswordScheme = _mforms.SessionStorePasswordScheme
PersistentStorePasswordScheme = _mforms.PersistentStorePasswordScheme
ModifierNoModifier = _mforms.ModifierNoModifier
ModifierControl = _mforms.ModifierControl
ModifierShift = _mforms.ModifierShift
ModifierCommand = _mforms.ModifierCommand
ModifierAlt = _mforms.ModifierAlt
ResultOk = _mforms.ResultOk
ResultCancel = _mforms.ResultCancel
ResultOther = _mforms.ResultOther
DialogMessage = _mforms.DialogMessage
DialogError = _mforms.DialogError
DialogWarning = _mforms.DialogWarning
DialogQuery = _mforms.DialogQuery
DialogSuccess = _mforms.DialogSuccess
class Utilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utilities, name)
    __repr__ = _swig_repr
    __swig_getmethods__["show_message"] = lambda x: _mforms.Utilities_show_message
    if _newclass:show_message = staticmethod(_mforms.Utilities_show_message)
    __swig_getmethods__["show_error"] = lambda x: _mforms.Utilities_show_error
    if _newclass:show_error = staticmethod(_mforms.Utilities_show_error)
    __swig_getmethods__["show_warning"] = lambda x: _mforms.Utilities_show_warning
    if _newclass:show_warning = staticmethod(_mforms.Utilities_show_warning)
    __swig_getmethods__["show_message_and_remember"] = lambda x: _mforms.Utilities_show_message_and_remember
    if _newclass:show_message_and_remember = staticmethod(_mforms.Utilities_show_message_and_remember)
    __swig_getmethods__["forget_message_answers"] = lambda x: _mforms.Utilities_forget_message_answers
    if _newclass:forget_message_answers = staticmethod(_mforms.Utilities_forget_message_answers)
    __swig_getmethods__["set_message_answers_storage_path"] = lambda x: _mforms.Utilities_set_message_answers_storage_path
    if _newclass:set_message_answers_storage_path = staticmethod(_mforms.Utilities_set_message_answers_storage_path)
    __swig_getmethods__["show_wait_message"] = lambda x: _mforms.Utilities_show_wait_message
    if _newclass:show_wait_message = staticmethod(_mforms.Utilities_show_wait_message)
    __swig_getmethods__["hide_wait_message"] = lambda x: _mforms.Utilities_hide_wait_message
    if _newclass:hide_wait_message = staticmethod(_mforms.Utilities_hide_wait_message)
    __swig_getmethods__["run_cancelable_task"] = lambda x: _mforms.Utilities_run_cancelable_task
    if _newclass:run_cancelable_task = staticmethod(_mforms.Utilities_run_cancelable_task)
    __swig_getmethods__["request_input"] = lambda x: _mforms.Utilities_request_input
    if _newclass:request_input = staticmethod(_mforms.Utilities_request_input)
    __swig_getmethods__["ask_for_password_check_store"] = lambda x: _mforms.Utilities_ask_for_password_check_store
    if _newclass:ask_for_password_check_store = staticmethod(_mforms.Utilities_ask_for_password_check_store)
    __swig_getmethods__["ask_for_password"] = lambda x: _mforms.Utilities_ask_for_password
    if _newclass:ask_for_password = staticmethod(_mforms.Utilities_ask_for_password)
    __swig_getmethods__["find_or_ask_for_password"] = lambda x: _mforms.Utilities_find_or_ask_for_password
    if _newclass:find_or_ask_for_password = staticmethod(_mforms.Utilities_find_or_ask_for_password)
    __swig_getmethods__["store_password"] = lambda x: _mforms.Utilities_store_password
    if _newclass:store_password = staticmethod(_mforms.Utilities_store_password)
    __swig_getmethods__["find_password"] = lambda x: _mforms.Utilities_find_password
    if _newclass:find_password = staticmethod(_mforms.Utilities_find_password)
    __swig_getmethods__["forget_password"] = lambda x: _mforms.Utilities_forget_password
    if _newclass:forget_password = staticmethod(_mforms.Utilities_forget_password)
    __swig_getmethods__["set_clipboard_text"] = lambda x: _mforms.Utilities_set_clipboard_text
    if _newclass:set_clipboard_text = staticmethod(_mforms.Utilities_set_clipboard_text)
    __swig_getmethods__["get_clipboard_text"] = lambda x: _mforms.Utilities_get_clipboard_text
    if _newclass:get_clipboard_text = staticmethod(_mforms.Utilities_get_clipboard_text)
    __swig_getmethods__["get_special_folder"] = lambda x: _mforms.Utilities_get_special_folder
    if _newclass:get_special_folder = staticmethod(_mforms.Utilities_get_special_folder)
    __swig_getmethods__["open_url"] = lambda x: _mforms.Utilities_open_url
    if _newclass:open_url = staticmethod(_mforms.Utilities_open_url)
    __swig_getmethods__["move_to_trash"] = lambda x: _mforms.Utilities_move_to_trash
    if _newclass:move_to_trash = staticmethod(_mforms.Utilities_move_to_trash)
    __swig_getmethods__["add_end_ok_cancel_buttons"] = lambda x: _mforms.Utilities_add_end_ok_cancel_buttons
    if _newclass:add_end_ok_cancel_buttons = staticmethod(_mforms.Utilities_add_end_ok_cancel_buttons)
    __swig_getmethods__["in_main_thread"] = lambda x: _mforms.Utilities_in_main_thread
    if _newclass:in_main_thread = staticmethod(_mforms.Utilities_in_main_thread)
    __swig_getmethods__["add_timeout"] = lambda x: _mforms.Utilities_add_timeout
    if _newclass:add_timeout = staticmethod(_mforms.Utilities_add_timeout)
    __swig_getmethods__["perform_from_main_thread"] = lambda x: _mforms.Utilities_perform_from_main_thread
    if _newclass:perform_from_main_thread = staticmethod(_mforms.Utilities_perform_from_main_thread)
    def __init__(self): 
        this = _mforms.new_Utilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Utilities
    __del__ = lambda self : None;
Utilities_swigregister = _mforms.Utilities_swigregister
Utilities_swigregister(Utilities)

def Utilities_show_message(*args):
  return _mforms.Utilities_show_message(*args)
Utilities_show_message = _mforms.Utilities_show_message

def Utilities_show_error(*args):
  return _mforms.Utilities_show_error(*args)
Utilities_show_error = _mforms.Utilities_show_error

def Utilities_show_warning(*args):
  return _mforms.Utilities_show_warning(*args)
Utilities_show_warning = _mforms.Utilities_show_warning

def Utilities_show_message_and_remember(*args):
  return _mforms.Utilities_show_message_and_remember(*args)
Utilities_show_message_and_remember = _mforms.Utilities_show_message_and_remember

def Utilities_forget_message_answers():
  return _mforms.Utilities_forget_message_answers()
Utilities_forget_message_answers = _mforms.Utilities_forget_message_answers

def Utilities_set_message_answers_storage_path(*args):
  return _mforms.Utilities_set_message_answers_storage_path(*args)
Utilities_set_message_answers_storage_path = _mforms.Utilities_set_message_answers_storage_path

def Utilities_show_wait_message(*args):
  return _mforms.Utilities_show_wait_message(*args)
Utilities_show_wait_message = _mforms.Utilities_show_wait_message

def Utilities_hide_wait_message():
  return _mforms.Utilities_hide_wait_message()
Utilities_hide_wait_message = _mforms.Utilities_hide_wait_message

def Utilities_run_cancelable_task(*args):
  return _mforms.Utilities_run_cancelable_task(*args)
Utilities_run_cancelable_task = _mforms.Utilities_run_cancelable_task

def Utilities_request_input(*args):
  return _mforms.Utilities_request_input(*args)
Utilities_request_input = _mforms.Utilities_request_input

def Utilities_ask_for_password_check_store(*args):
  return _mforms.Utilities_ask_for_password_check_store(*args)
Utilities_ask_for_password_check_store = _mforms.Utilities_ask_for_password_check_store

def Utilities_ask_for_password(*args):
  return _mforms.Utilities_ask_for_password(*args)
Utilities_ask_for_password = _mforms.Utilities_ask_for_password

def Utilities_find_or_ask_for_password(*args):
  return _mforms.Utilities_find_or_ask_for_password(*args)
Utilities_find_or_ask_for_password = _mforms.Utilities_find_or_ask_for_password

def Utilities_store_password(*args):
  return _mforms.Utilities_store_password(*args)
Utilities_store_password = _mforms.Utilities_store_password

def Utilities_find_password(*args):
  return _mforms.Utilities_find_password(*args)
Utilities_find_password = _mforms.Utilities_find_password

def Utilities_forget_password(*args):
  return _mforms.Utilities_forget_password(*args)
Utilities_forget_password = _mforms.Utilities_forget_password

def Utilities_set_clipboard_text(*args):
  return _mforms.Utilities_set_clipboard_text(*args)
Utilities_set_clipboard_text = _mforms.Utilities_set_clipboard_text

def Utilities_get_clipboard_text():
  return _mforms.Utilities_get_clipboard_text()
Utilities_get_clipboard_text = _mforms.Utilities_get_clipboard_text

def Utilities_get_special_folder(*args):
  return _mforms.Utilities_get_special_folder(*args)
Utilities_get_special_folder = _mforms.Utilities_get_special_folder

def Utilities_open_url(*args):
  return _mforms.Utilities_open_url(*args)
Utilities_open_url = _mforms.Utilities_open_url

def Utilities_move_to_trash(*args):
  return _mforms.Utilities_move_to_trash(*args)
Utilities_move_to_trash = _mforms.Utilities_move_to_trash

def Utilities_add_end_ok_cancel_buttons(*args):
  return _mforms.Utilities_add_end_ok_cancel_buttons(*args)
Utilities_add_end_ok_cancel_buttons = _mforms.Utilities_add_end_ok_cancel_buttons

def Utilities_in_main_thread():
  return _mforms.Utilities_in_main_thread()
Utilities_in_main_thread = _mforms.Utilities_in_main_thread

def Utilities_add_timeout(*args):
  return _mforms.Utilities_add_timeout(*args)
Utilities_add_timeout = _mforms.Utilities_add_timeout

def Utilities_perform_from_main_thread(*args):
  return _mforms.Utilities_perform_from_main_thread(*args)
Utilities_perform_from_main_thread = _mforms.Utilities_perform_from_main_thread

class AppView(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppView, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_AppView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_AppView
    __del__ = lambda self : None;
    def set_title(self, *args): return _mforms.AppView_set_title(self, *args)
    def get_title(self): return _mforms.AppView_get_title(self)
    def set_identifier(self, *args): return _mforms.AppView_set_identifier(self, *args)
    def identifier(self): return _mforms.AppView_identifier(self)
    def get_menubar(self): return _mforms.AppView_get_menubar(self)
    def set_menubar(self, *args): return _mforms.AppView_set_menubar(self, *args)
    def get_toolbar(self): return _mforms.AppView_get_toolbar(self)
    def set_toolbar(self, *args): return _mforms.AppView_set_toolbar(self, *args)
    def is_main_form(self): return _mforms.AppView_is_main_form(self)
    def get_form_context_name(self): return _mforms.AppView_get_form_context_name(self)
    def on_close(self, *args): return _mforms.AppView_on_close(self, *args)
AppView_swigregister = _mforms.AppView_swigregister
AppView_swigregister(AppView)

class DockingPoint(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DockingPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DockingPoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_DockingPoint
    __del__ = lambda self : None;
    def get_type(self): return _mforms.DockingPoint_get_type(self)
    def dock_view(self, *args): return _mforms.DockingPoint_dock_view(self, *args)
    def select_view(self, *args): return _mforms.DockingPoint_select_view(self, *args)
    def undock_view(self, *args): return _mforms.DockingPoint_undock_view(self, *args)
    def close_view(self, *args): return _mforms.DockingPoint_close_view(self, *args)
    def set_view_title(self, *args): return _mforms.DockingPoint_set_view_title(self, *args)
    def get_size(self): return _mforms.DockingPoint_get_size(self)
DockingPoint_swigregister = _mforms.DockingPoint_swigregister
DockingPoint_swigregister(DockingPoint)

SystemColorHighlight = _mforms.SystemColorHighlight
SystemColorEditor = _mforms.SystemColorEditor
SystemColorDisabled = _mforms.SystemColorDisabled
SystemColorContainer = _mforms.SystemColorContainer
class App(DockingPoint):
    __swig_setmethods__ = {}
    for _s in [DockingPoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, App, name, value)
    __swig_getmethods__ = {}
    for _s in [DockingPoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, App, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _mforms.App_get
    if _newclass:get = staticmethod(_mforms.App_get)
    def set_status_text(self, *args): return _mforms.App_set_status_text(self, *args)
    def get_resource_path(self, *args): return _mforms.App_get_resource_path(self, *args)
    def get_executable_path(self, *args): return _mforms.App_get_executable_path(self, *args)
    def get_user_data_folder(self): return _mforms.App_get_user_data_folder(self)
    def get_bounds(self, *args): return _mforms.App_get_bounds(self, *args)
    def enter_event_loop(self, timeout = 0.0): return _mforms.App_enter_event_loop(self, timeout)
    def exit_event_loop(self, *args): return _mforms.App_exit_event_loop(self, *args)
    __swig_getmethods__["begin_thread_loop"] = lambda x: _mforms.App_begin_thread_loop
    if _newclass:begin_thread_loop = staticmethod(_mforms.App_begin_thread_loop)
    __swig_getmethods__["end_thread_loop"] = lambda x: _mforms.App_end_thread_loop
    if _newclass:end_thread_loop = staticmethod(_mforms.App_end_thread_loop)
    def get_system_color(self, *args): return _mforms.App_get_system_color(self, *args)
    def close_splash(self): return _mforms.App_close_splash(self)
    __swig_destroy__ = _mforms.delete_App
    __del__ = lambda self : None;
App_swigregister = _mforms.App_swigregister
App_swigregister(App)

def App_get():
  return _mforms.App_get()
App_get = _mforms.App_get

def App_begin_thread_loop():
  return _mforms.App_begin_thread_loop()
App_begin_thread_loop = _mforms.App_begin_thread_loop

def App_end_thread_loop():
  return _mforms.App_end_thread_loop()
App_end_thread_loop = _mforms.App_end_thread_loop

class DrawBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_DrawBox()
        try: self.this.append(this)
        except: self.this = this
    def set_needs_repaint(self): return _mforms.DrawBox_set_needs_repaint(self)
    def get_layout_size(self): return _mforms.DrawBox_get_layout_size(self)
    __swig_destroy__ = _mforms.delete_DrawBox
    __del__ = lambda self : None;
DrawBox_swigregister = _mforms.DrawBox_swigregister
DrawBox_swigregister(DrawBox)

TabBackground = _mforms.TabBackground
TabMainCaption = _mforms.TabMainCaption
TabSubCaption = _mforms.TabSubCaption
TabLineColor = _mforms.TabLineColor
class TabSwitcher(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabSwitcher, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabSwitcher, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_TabSwitcher()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TabSwitcher
    __del__ = lambda self : None;
    def attach_to_tabview(self, *args): return _mforms.TabSwitcher_attach_to_tabview(self, *args)
    def add_item(self, *args): return _mforms.TabSwitcher_add_item(self, *args)
    def set_icon(self, *args): return _mforms.TabSwitcher_set_icon(self, *args)
    def set_color(self, *args): return _mforms.TabSwitcher_set_color(self, *args)
    def set_selected(self, *args): return _mforms.TabSwitcher_set_selected(self, *args)
    def get_selected(self): return _mforms.TabSwitcher_get_selected(self)
    def set_needs_relayout(self): return _mforms.TabSwitcher_set_needs_relayout(self)
    def add_changed_callback(self, *args): return _mforms.TabSwitcher_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TabSwitcher_call_changed_callback(self)
TabSwitcher_swigregister = _mforms.TabSwitcher_swigregister
TabSwitcher_swigregister(TabSwitcher)

class SectionBox(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SectionBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_SectionBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_SectionBox
    __del__ = lambda self : None;
    def set_content(self, *args): return _mforms.SectionBox_set_content(self, *args)
    def toggle(self): return _mforms.SectionBox_toggle(self)
    def set_expanded(self, *args): return _mforms.SectionBox_set_expanded(self, *args)
    def get_expanded(self): return _mforms.SectionBox_get_expanded(self)
SectionBox_swigregister = _mforms.SectionBox_swigregister
SectionBox_swigregister(SectionBox)

class BaseWidget(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_BaseWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BaseWidget
    __del__ = lambda self : None;
    def enable_auto_scale(self, *args): return _mforms.BaseWidget_enable_auto_scale(self, *args)
    def get_upper_range(self): return _mforms.BaseWidget_get_upper_range(self)
    def set_value_range(self, *args): return _mforms.BaseWidget_set_value_range(self, *args)
    def set_thresholds(self, *args): return _mforms.BaseWidget_set_thresholds(self, *args)
    def set_description(self, *args): return _mforms.BaseWidget_set_description(self, *args)
BaseWidget_swigregister = _mforms.BaseWidget_swigregister
BaseWidget_swigregister(BaseWidget)

class WidgetSeparator(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetSeparator, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetSeparator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_WidgetSeparator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetSeparator
    __del__ = lambda self : None;
WidgetSeparator_swigregister = _mforms.WidgetSeparator_swigregister
WidgetSeparator_swigregister(WidgetSeparator)

class WidgetContainer(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_WidgetContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetContainer
    __del__ = lambda self : None;
    def add_widget(self, *args): return _mforms.WidgetContainer_add_widget(self, *args)
    def set_title(self, *args): return _mforms.WidgetContainer_set_title(self, *args)
WidgetContainer_swigregister = _mforms.WidgetContainer_swigregister
WidgetContainer_swigregister(WidgetContainer)

HEARTBEAT_DATA_SIZE = _mforms.HEARTBEAT_DATA_SIZE
class HeartbeatWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeartbeatWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeartbeatWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_HeartbeatWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_HeartbeatWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.HeartbeatWidget_set_value(self, *args)
HeartbeatWidget_swigregister = _mforms.HeartbeatWidget_swigregister
HeartbeatWidget_swigregister(HeartbeatWidget)

class ServerInfoWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfoWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfoWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ServerInfoWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_ServerInfoWidget
    __del__ = lambda self : None;
    def set_server_info(self, *args): return _mforms.ServerInfoWidget_set_server_info(self, *args)
    def set_server_status(self, *args): return _mforms.ServerInfoWidget_set_server_status(self, *args)
ServerInfoWidget_swigregister = _mforms.ServerInfoWidget_swigregister
ServerInfoWidget_swigregister(ServerInfoWidget)

class BarGraphWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarGraphWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarGraphWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_BarGraphWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BarGraphWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.BarGraphWidget_set_value(self, *args)
BarGraphWidget_swigregister = _mforms.BarGraphWidget_swigregister
BarGraphWidget_swigregister(BarGraphWidget)

LINE_SERIES_DATA_SIZE = _mforms.LINE_SERIES_DATA_SIZE
class LineDiagramWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineDiagramWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineDiagramWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_LineDiagramWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_LineDiagramWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.LineDiagramWidget_set_value(self, *args)
LineDiagramWidget_swigregister = _mforms.LineDiagramWidget_swigregister
LineDiagramWidget_swigregister(LineDiagramWidget)

class WebBrowser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebBrowser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WebBrowser, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_WebBrowser()
        try: self.this.append(this)
        except: self.this = this
    def set_html(self, *args): return _mforms.WebBrowser_set_html(self, *args)
    def navigate(self, *args): return _mforms.WebBrowser_navigate(self, *args)
    def get_document_title(self): return _mforms.WebBrowser_get_document_title(self)
    def set_link_click_handler(self, *args): return _mforms.WebBrowser_set_link_click_handler(self, *args)
    def add_loaded_callback(self, *args): return _mforms.WebBrowser_add_loaded_callback(self, *args)
    def call_loaded_callback(self, *args): return _mforms.WebBrowser_call_loaded_callback(self, *args)
    __swig_destroy__ = _mforms.delete_WebBrowser
    __del__ = lambda self : None;
WebBrowser_swigregister = _mforms.WebBrowser_swigregister
WebBrowser_swigregister(WebBrowser)

PopupPlain = _mforms.PopupPlain
PopupBezel = _mforms.PopupBezel
class Popup(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Popup(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_needs_repaint(self): return _mforms.Popup_set_needs_repaint(self)
    def set_size(self, *args): return _mforms.Popup_set_size(self, *args)
    def show(self, *args): return _mforms.Popup_show(self, *args)
    def get_content_rect(self): return _mforms.Popup_get_content_rect(self)
    def set_modal_result(self, *args): return _mforms.Popup_set_modal_result(self, *args)
    __swig_destroy__ = _mforms.delete_Popup
    __del__ = lambda self : None;
Popup_swigregister = _mforms.Popup_swigregister
Popup_swigregister(Popup)

class Menu(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Menu, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Menu, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Menu()
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _mforms.Menu_empty(self)
    def clear(self): return _mforms.Menu_clear(self)
    def remove_item(self, *args): return _mforms.Menu_remove_item(self, *args)
    def add_item(self, *args): return _mforms.Menu_add_item(self, *args)
    def add_separator(self): return _mforms.Menu_add_separator(self)
    def add_submenu(self, *args): return _mforms.Menu_add_submenu(self, *args)
    def add_items_from_list(self, *args): return _mforms.Menu_add_items_from_list(self, *args)
    def set_item_enabled(self, *args): return _mforms.Menu_set_item_enabled(self, *args)
    def popup_at(self, *args): return _mforms.Menu_popup_at(self, *args)
    def popup(self): return _mforms.Menu_popup(self)
    def handle_action(self, *args): return _mforms.Menu_handle_action(self, *args)
    def get_item_index(self, *args): return _mforms.Menu_get_item_index(self, *args)
    def add_on_action_callback(self, *args): return _mforms.Menu_add_on_action_callback(self, *args)
    def call_on_action_callback(self, *args): return _mforms.Menu_call_on_action_callback(self, *args)
    def set_handler(self, *args): return _mforms.Menu_set_handler(self, *args)
    __swig_destroy__ = _mforms.delete_Menu
    __del__ = lambda self : None;
Menu_swigregister = _mforms.Menu_swigregister
Menu_swigregister(Menu)

class Splitter(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Splitter, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Splitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Splitter(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _mforms.Splitter_add(self, *args)
    def remove(self, *args): return _mforms.Splitter_remove(self, *args)
    def set_position(self, *args): return _mforms.Splitter_set_position(self, *args)
    def get_position(self): return _mforms.Splitter_get_position(self)
    def set_expanded(self, *args): return _mforms.Splitter_set_expanded(self, *args)
    def position_changed(self): return _mforms.Splitter_position_changed(self)
    __swig_destroy__ = _mforms.delete_Splitter
    __del__ = lambda self : None;
Splitter_swigregister = _mforms.Splitter_swigregister
Splitter_swigregister(Splitter)

LanguageNone = _mforms.LanguageNone
LanguageMySQL50 = _mforms.LanguageMySQL50
LanguageMySQL51 = _mforms.LanguageMySQL51
LanguageMySQL55 = _mforms.LanguageMySQL55
LanguageMySQL56 = _mforms.LanguageMySQL56
LanguageHtml = _mforms.LanguageHtml
LanguageLua = _mforms.LanguageLua
LanguagePython = _mforms.LanguagePython
LanguageMySQL = _mforms.LanguageMySQL
LineMarkupNone = _mforms.LineMarkupNone
LineMarkupBreakpoint = _mforms.LineMarkupBreakpoint
LineMarkupBreakpointHit = _mforms.LineMarkupBreakpointHit
LineMarkupError = _mforms.LineMarkupError
LineMarkupStatement = _mforms.LineMarkupStatement
LineMarkupCurrent = _mforms.LineMarkupCurrent
LineMarkupAll = _mforms.LineMarkupAll
RangeIndicatorNone = _mforms.RangeIndicatorNone
RangeIndicatorError = _mforms.RangeIndicatorError
FeatureNone = _mforms.FeatureNone
FeatureWrapText = _mforms.FeatureWrapText
FeatureGutter = _mforms.FeatureGutter
FeatureReadOnly = _mforms.FeatureReadOnly
FeatureShowSpecial = _mforms.FeatureShowSpecial
FeatureUsePopup = _mforms.FeatureUsePopup
FeatureConvertEolOnPaste = _mforms.FeatureConvertEolOnPaste
FeatureAll = _mforms.FeatureAll
AutoCompletionSelection = _mforms.AutoCompletionSelection
AutoCompletionCancelled = _mforms.AutoCompletionCancelled
AutoCompletionCharDeleted = _mforms.AutoCompletionCharDeleted
EolCRLF = _mforms.EolCRLF
EolCR = _mforms.EolCR
EolLF = _mforms.EolLF
FindDefault = _mforms.FindDefault
FindMatchCase = _mforms.FindMatchCase
FindWrapAround = _mforms.FindWrapAround
FindWholeWords = _mforms.FindWholeWords
FindRegex = _mforms.FindRegex
class CodeEditor(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeEditor, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CodeEditor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_CodeEditor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_CodeEditor
    __del__ = lambda self : None;
    def set_text(self, *args): return _mforms.CodeEditor_set_text(self, *args)
    def set_value(self, *args): return _mforms.CodeEditor_set_value(self, *args)
    def set_text_keeping_state(self, *args): return _mforms.CodeEditor_set_text_keeping_state(self, *args)
    def append_text(self, *args): return _mforms.CodeEditor_append_text(self, *args)
    def replace_selected_text(self, *args): return _mforms.CodeEditor_replace_selected_text(self, *args)
    def get_text(self, *args): return _mforms.CodeEditor_get_text(self, *args)
    def get_text_in_range(self, *args): return _mforms.CodeEditor_get_text_in_range(self, *args)
    def get_text_ptr(self): return _mforms.CodeEditor_get_text_ptr(self)
    def set_selection(self, *args): return _mforms.CodeEditor_set_selection(self, *args)
    def get_selection(self, *args): return _mforms.CodeEditor_get_selection(self, *args)
    def clear_selection(self): return _mforms.CodeEditor_clear_selection(self)
    def get_range_of_line(self, *args): return _mforms.CodeEditor_get_range_of_line(self, *args)
    def set_language(self, *args): return _mforms.CodeEditor_set_language(self, *args)
    def show_markup(self, *args): return _mforms.CodeEditor_show_markup(self, *args)
    def remove_markup(self, *args): return _mforms.CodeEditor_remove_markup(self, *args)
    def show_indicator(self, *args): return _mforms.CodeEditor_show_indicator(self, *args)
    def indicator_at(self, *args): return _mforms.CodeEditor_indicator_at(self, *args)
    def remove_indicator(self, *args): return _mforms.CodeEditor_remove_indicator(self, *args)
    def line_count(self): return _mforms.CodeEditor_line_count(self)
    def text_length(self): return _mforms.CodeEditor_text_length(self)
    def position_from_line(self, *args): return _mforms.CodeEditor_position_from_line(self, *args)
    def line_from_position(self, *args): return _mforms.CodeEditor_line_from_position(self, *args)
    def set_font(self, *args): return _mforms.CodeEditor_set_font(self, *args)
    def set_features(self, *args): return _mforms.CodeEditor_set_features(self, *args)
    def toggle_features(self, *args): return _mforms.CodeEditor_toggle_features(self, *args)
    def reset_dirty(self): return _mforms.CodeEditor_reset_dirty(self)
    def is_dirty(self): return _mforms.CodeEditor_is_dirty(self)
    def get_caret_pos(self): return _mforms.CodeEditor_get_caret_pos(self)
    def set_caret_pos(self, *args): return _mforms.CodeEditor_set_caret_pos(self, *args)
    def get_line_column_pos(self, *args): return _mforms.CodeEditor_get_line_column_pos(self, *args)
    def can_undo(self): return _mforms.CodeEditor_can_undo(self)
    def undo(self): return _mforms.CodeEditor_undo(self)
    def can_redo(self): return _mforms.CodeEditor_can_redo(self)
    def redo(self): return _mforms.CodeEditor_redo(self)
    def can_cut(self): return _mforms.CodeEditor_can_cut(self)
    def cut(self): return _mforms.CodeEditor_cut(self)
    def can_copy(self): return _mforms.CodeEditor_can_copy(self)
    def copy(self): return _mforms.CodeEditor_copy(self)
    def can_paste(self): return _mforms.CodeEditor_can_paste(self)
    def paste(self): return _mforms.CodeEditor_paste(self)
    def can_delete(self): return _mforms.CodeEditor_can_delete(self)
    def do_delete(self): return _mforms.CodeEditor_do_delete(self)
    def select_all(self): return _mforms.CodeEditor_select_all(self)
    def set_status_text(self, *args): return _mforms.CodeEditor_set_status_text(self, *args)
    def enable_folding(self, *args): return _mforms.CodeEditor_enable_folding(self, *args)
    def show_find_panel(self, *args): return _mforms.CodeEditor_show_find_panel(self, *args)
    def hide_find_panel(self): return _mforms.CodeEditor_hide_find_panel(self)
    def get_find_panel(self): return _mforms.CodeEditor_get_find_panel(self)
    def set_show_find_panel_callback(self, *args): return _mforms.CodeEditor_set_show_find_panel_callback(self, *args)
    def find_and_highlight_text(self, *args): return _mforms.CodeEditor_find_and_highlight_text(self, *args)
    def find_and_replace_text(self, *args): return _mforms.CodeEditor_find_and_replace_text(self, *args)
    def jump_to_next_placeholder(self): return _mforms.CodeEditor_jump_to_next_placeholder(self)
    def auto_completion_show(self, *args): return _mforms.CodeEditor_auto_completion_show(self, *args)
    def auto_completion_cancel(self): return _mforms.CodeEditor_auto_completion_cancel(self)
    def auto_completion_options(self, *args): return _mforms.CodeEditor_auto_completion_options(self, *args)
    def auto_completion_max_size(self, *args): return _mforms.CodeEditor_auto_completion_max_size(self, *args)
    def auto_completion_register_images(self, *args): return _mforms.CodeEditor_auto_completion_register_images(self, *args)
    def auto_completion_active(self): return _mforms.CodeEditor_auto_completion_active(self)
    def auto_completion_stops(self, *args): return _mforms.CodeEditor_auto_completion_stops(self, *args)
    def auto_completion_fillups(self, *args): return _mforms.CodeEditor_auto_completion_fillups(self, *args)
    def show_calltip(self, *args): return _mforms.CodeEditor_show_calltip(self, *args)
    def set_eol_mode(self, *args): return _mforms.CodeEditor_set_eol_mode(self, *args)
    def set_context_menu(self, *args): return _mforms.CodeEditor_set_context_menu(self, *args)
    def get_context_menu(self): return _mforms.CodeEditor_get_context_menu(self)
    def send_editor(self, *args): return _mforms.CodeEditor_send_editor(self, *args)
    def add_changed_callback(self, *args): return _mforms.CodeEditor_add_changed_callback(self, *args)
    def call_changed_callback(self, *args): return _mforms.CodeEditor_call_changed_callback(self, *args)
CodeEditor_swigregister = _mforms.CodeEditor_swigregister
CodeEditor_swigregister(CodeEditor)

TaskEntrySelectableItem = _mforms.TaskEntrySelectableItem
TaskEntryLink = _mforms.TaskEntryLink
TaskEntryPlainItem = _mforms.TaskEntryPlainItem
class TaskSidebar(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSidebar, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSidebar, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _mforms.TaskSidebar_create
    if _newclass:create = staticmethod(_mforms.TaskSidebar_create)
    def refresh_model(self): return _mforms.TaskSidebar_refresh_model(self)
    def set_schema_model(self, *args): return _mforms.TaskSidebar_set_schema_model(self, *args)
    def set_filtered_schema_model(self, *args): return _mforms.TaskSidebar_set_filtered_schema_model(self, *args)
    def enable_server_search(self, *args): return _mforms.TaskSidebar_enable_server_search(self, *args)
    def get_schema_tree(self): return _mforms.TaskSidebar_get_schema_tree(self)
    def get_filter_entry(self): return _mforms.TaskSidebar_get_filter_entry(self)
    def add_section(self, *args): return _mforms.TaskSidebar_add_section(self, *args)
    def remove_section(self, *args): return _mforms.TaskSidebar_remove_section(self, *args)
    def add_section_entry(self, *args): return _mforms.TaskSidebar_add_section_entry(self, *args)
    def set_section_entry_text(self, *args): return _mforms.TaskSidebar_set_section_entry_text(self, *args)
    def mark_section_busy(self, *args): return _mforms.TaskSidebar_mark_section_busy(self, *args)
    def remove_section_entry(self, *args): return _mforms.TaskSidebar_remove_section_entry(self, *args)
    def set_collapse_states(self, *args): return _mforms.TaskSidebar_set_collapse_states(self, *args)
    def get_collapse_states(self): return _mforms.TaskSidebar_get_collapse_states(self)
    def clear_sections(self): return _mforms.TaskSidebar_clear_sections(self)
    def clear_section(self, *args): return _mforms.TaskSidebar_clear_section(self, *args)
    def set_selection_color(self, *args): return _mforms.TaskSidebar_set_selection_color(self, *args)
    def signal_filter_changed(self): return _mforms.TaskSidebar_signal_filter_changed(self)
    def tree_node_selected(self): return _mforms.TaskSidebar_tree_node_selected(self)
    def expand_schema(self, *args): return _mforms.TaskSidebar_expand_schema(self, *args)
    def select_entry(self, *args): return _mforms.TaskSidebar_select_entry(self, *args)
    def clear_selection(self): return _mforms.TaskSidebar_clear_selection(self)
    def on_section_command(self): return _mforms.TaskSidebar_on_section_command(self)
    __swig_getmethods__["register_factory"] = lambda x: _mforms.TaskSidebar_register_factory
    if _newclass:register_factory = staticmethod(_mforms.TaskSidebar_register_factory)
    def add_on_section_command_callback(self, *args): return _mforms.TaskSidebar_add_on_section_command_callback(self, *args)
    def call_on_section_command_callback(self, *args): return _mforms.TaskSidebar_call_on_section_command_callback(self, *args)
    __swig_destroy__ = _mforms.delete_TaskSidebar
    __del__ = lambda self : None;
TaskSidebar_swigregister = _mforms.TaskSidebar_swigregister
TaskSidebar_swigregister(TaskSidebar)

def TaskSidebar_create():
  return _mforms.TaskSidebar_create()
TaskSidebar_create = _mforms.TaskSidebar_create

def TaskSidebar_register_factory(*args):
  return _mforms.TaskSidebar_register_factory(*args)
TaskSidebar_register_factory = _mforms.TaskSidebar_register_factory

CellInvalid = _mforms.CellInvalid
CellText = _mforms.CellText
CellBool = _mforms.CellBool
CellEnum = _mforms.CellEnum
CellHeader = _mforms.CellHeader
CellGroupHeader = _mforms.CellGroupHeader
CellsReadable = _mforms.CellsReadable
CellsEditable = _mforms.CellsEditable
Clear = _mforms.Clear
AlignLeft = _mforms.AlignLeft
AlignRight = _mforms.AlignRight
Underline = _mforms.Underline
ShadeNone = _mforms.ShadeNone
ShadeFind = _mforms.ShadeFind
ShadeFilter = _mforms.ShadeFilter
NotVisible = _mforms.NotVisible
ShowAlways = _mforms.ShowAlways
ShowOnHover = _mforms.ShowOnHover
IconLeft = _mforms.IconLeft
IconRight = _mforms.IconRight
class GridPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridPath, name)
    __repr__ = _swig_repr
    def size(self): return _mforms.GridPath_size(self)
    def append(self, *args): return _mforms.GridPath_append(self, *args)
    def up(self): return _mforms.GridPath_up(self)
    def next(self): return _mforms.GridPath_next(self)
    def prev(self): return _mforms.GridPath_prev(self)
    def index(self, *args): return _mforms.GridPath_index(self, *args)
    def set_index(self, *args): return _mforms.GridPath_set_index(self, *args)
    def __eq__(self, *args): return _mforms.GridPath___eq__(self, *args)
    def __lt__(self, *args): return _mforms.GridPath___lt__(self, *args)
    def __gt__(self, *args): return _mforms.GridPath___gt__(self, *args)
    def __init__(self): 
        this = _mforms.new_GridPath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_GridPath
    __del__ = lambda self : None;
GridPath_swigregister = _mforms.GridPath_swigregister
GridPath_swigregister(GridPath)

class Grid(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Grid()
        try: self.this.append(this)
        except: self.this = this
    def add_column(self, *args): return _mforms.Grid_add_column(self, *args)
    def clear(self): return _mforms.Grid_clear(self)
    def get_children_count(self, *args): return _mforms.Grid_get_children_count(self, *args)
    def is_node_expanded(self, *args): return _mforms.Grid_is_node_expanded(self, *args)
    def set_node_expanded(self, *args): return _mforms.Grid_set_node_expanded(self, *args)
    def set_column_width(self, *args): return _mforms.Grid_set_column_width(self, *args)
    def append_header(self, *args): return _mforms.Grid_append_header(self, *args)
    def append_row(self, *args): return _mforms.Grid_append_row(self, *args)
    def insert_row(self, *args): return _mforms.Grid_insert_row(self, *args)
    def remove_row(self, *args): return _mforms.Grid_remove_row(self, *args)
    def set_str_value(self, *args): return _mforms.Grid_set_str_value(self, *args)
    def set_bool_value(self, *args): return _mforms.Grid_set_bool_value(self, *args)
    def get_cell_value(self, *args): return _mforms.Grid_get_cell_value(self, *args)
    def get_cell_type(self, *args): return _mforms.Grid_get_cell_type(self, *args)
    def set_cell_type(self, *args): return _mforms.Grid_set_cell_type(self, *args)
    def set_cell_attr(self, *args): return _mforms.Grid_set_cell_attr(self, *args)
    def set_enum(self, *args): return _mforms.Grid_set_enum(self, *args)
    def set_row_tag(self, *args): return _mforms.Grid_set_row_tag(self, *args)
    def get_row_tag(self, *args): return _mforms.Grid_get_row_tag(self, *args)
    def set_row_caption(self, *args): return _mforms.Grid_set_row_caption(self, *args)
    def get_row_caption(self, *args): return _mforms.Grid_get_row_caption(self, *args)
    def set_action_icon(self, *args): return _mforms.Grid_set_action_icon(self, *args)
    def get_context_menu(self): return _mforms.Grid_get_context_menu(self)
    def popup_context_menu(self): return _mforms.Grid_popup_context_menu(self)
    def scroll_to_row(self, *args): return _mforms.Grid_scroll_to_row(self, *args)
    def set_fg(self, *args): return _mforms.Grid_set_fg(self, *args)
    def set_bg(self, *args): return _mforms.Grid_set_bg(self, *args)
    def shade(self, *args): return _mforms.Grid_shade(self, *args)
    def unshade(self, *args): return _mforms.Grid_unshade(self, *args)
    def has_shade(self, *args): return _mforms.Grid_has_shade(self, *args)
    def add_content_edited_callback(self, *args): return _mforms.Grid_add_content_edited_callback(self, *args)
    def add_ro_content_clicked_callback(self, *args): return _mforms.Grid_add_ro_content_clicked_callback(self, *args)
    def add_content_action_callback(self, *args): return _mforms.Grid_add_content_action_callback(self, *args)
    def add_context_menu_callback(self, *args): return _mforms.Grid_add_context_menu_callback(self, *args)
    __swig_destroy__ = _mforms.delete_Grid
    __del__ = lambda self : None;
Grid_swigregister = _mforms.Grid_swigregister
Grid_swigregister(Grid)

class HyperText(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperText, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperText, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_HyperText()
        try: self.this.append(this)
        except: self.this = this
    def set_markup_text(self, *args): return _mforms.HyperText_set_markup_text(self, *args)
    def handle_url_click(self, *args): return _mforms.HyperText_handle_url_click(self, *args)
    def add_link_click_callback(self, *args): return _mforms.HyperText_add_link_click_callback(self, *args)
    def call_link_click_callback(self, *args): return _mforms.HyperText_call_link_click_callback(self, *args)
    __swig_destroy__ = _mforms.delete_HyperText
    __del__ = lambda self : None;
HyperText_swigregister = _mforms.HyperText_swigregister
HyperText_swigregister(HyperText)

StringColumnType = _mforms.StringColumnType
IntegerColumnType = _mforms.IntegerColumnType
LongIntegerColumnType = _mforms.LongIntegerColumnType
CheckColumnType = _mforms.CheckColumnType
IconColumnType = _mforms.IconColumnType
IconStringColumnType = _mforms.IconStringColumnType
TreeDefault = _mforms.TreeDefault
TreeNoColumns = _mforms.TreeNoColumns
TreeAllowReorderRows = _mforms.TreeAllowReorderRows
TreeShowColumnLines = _mforms.TreeShowColumnLines
TreeShowRowLines = _mforms.TreeShowRowLines
TreeNoBorder = _mforms.TreeNoBorder
TreeSidebar = _mforms.TreeSidebar
TreeNoHeader = _mforms.TreeNoHeader
TreeShowHeader = _mforms.TreeShowHeader
TreeFlatList = _mforms.TreeFlatList
TreeAltRowColors = _mforms.TreeAltRowColors
TreeSizeSmall = _mforms.TreeSizeSmall
TreeIndexOnTag = _mforms.TreeIndexOnTag
TreeSelectSingle = _mforms.TreeSelectSingle
TreeSelectMultiple = _mforms.TreeSelectMultiple
class TreeNodeSkeleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeSkeleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeSkeleton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeNodeSkeleton(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["caption"] = _mforms.TreeNodeSkeleton_caption_set
    __swig_getmethods__["caption"] = _mforms.TreeNodeSkeleton_caption_get
    if _newclass:caption = _swig_property(_mforms.TreeNodeSkeleton_caption_get, _mforms.TreeNodeSkeleton_caption_set)
    __swig_setmethods__["icon"] = _mforms.TreeNodeSkeleton_icon_set
    __swig_getmethods__["icon"] = _mforms.TreeNodeSkeleton_icon_get
    if _newclass:icon = _swig_property(_mforms.TreeNodeSkeleton_icon_get, _mforms.TreeNodeSkeleton_icon_set)
    __swig_setmethods__["tag"] = _mforms.TreeNodeSkeleton_tag_set
    __swig_getmethods__["tag"] = _mforms.TreeNodeSkeleton_tag_get
    if _newclass:tag = _swig_property(_mforms.TreeNodeSkeleton_tag_get, _mforms.TreeNodeSkeleton_tag_set)
    __swig_setmethods__["children"] = _mforms.TreeNodeSkeleton_children_set
    __swig_getmethods__["children"] = _mforms.TreeNodeSkeleton_children_get
    if _newclass:children = _swig_property(_mforms.TreeNodeSkeleton_children_get, _mforms.TreeNodeSkeleton_children_set)
    __swig_destroy__ = _mforms.delete_TreeNodeSkeleton
    __del__ = lambda self : None;
TreeNodeSkeleton_swigregister = _mforms.TreeNodeSkeleton_swigregister
TreeNodeSkeleton_swigregister(TreeNodeSkeleton)

class TreeNodeCollectionSkeleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeCollectionSkeleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeCollectionSkeleton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeNodeCollectionSkeleton(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["icon"] = _mforms.TreeNodeCollectionSkeleton_icon_set
    __swig_getmethods__["icon"] = _mforms.TreeNodeCollectionSkeleton_icon_get
    if _newclass:icon = _swig_property(_mforms.TreeNodeCollectionSkeleton_icon_get, _mforms.TreeNodeCollectionSkeleton_icon_set)
    __swig_setmethods__["children"] = _mforms.TreeNodeCollectionSkeleton_children_set
    __swig_getmethods__["children"] = _mforms.TreeNodeCollectionSkeleton_children_get
    if _newclass:children = _swig_property(_mforms.TreeNodeCollectionSkeleton_children_get, _mforms.TreeNodeCollectionSkeleton_children_set)
    __swig_setmethods__["captions"] = _mforms.TreeNodeCollectionSkeleton_captions_set
    __swig_getmethods__["captions"] = _mforms.TreeNodeCollectionSkeleton_captions_get
    if _newclass:captions = _swig_property(_mforms.TreeNodeCollectionSkeleton_captions_get, _mforms.TreeNodeCollectionSkeleton_captions_set)
    __swig_destroy__ = _mforms.delete_TreeNodeCollectionSkeleton
    __del__ = lambda self : None;
TreeNodeCollectionSkeleton_swigregister = _mforms.TreeNodeCollectionSkeleton_swigregister
TreeNodeCollectionSkeleton_swigregister(TreeNodeCollectionSkeleton)

class TreeNodeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_TreeNodeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TreeNodeData
    __del__ = lambda self : None;
    def retain(self): return _mforms.TreeNodeData_retain(self)
    def release(self): return _mforms.TreeNodeData_release(self)
TreeNodeData_swigregister = _mforms.TreeNodeData_swigregister
TreeNodeData_swigregister(TreeNodeData)

class TreeNodeRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeNodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TreeNodeRef
    __del__ = lambda self : None;
    def __deref__(self, *args): return _mforms.TreeNodeRef___deref__(self, *args)
    def __nonzero__(self):
        return _mforms.TreeNodeRef___nonzero__(self)
    __bool__ = __nonzero__


    def __eq__(self, *args): return _mforms.TreeNodeRef___eq__(self, *args)
    def __ne__(self, *args): return _mforms.TreeNodeRef___ne__(self, *args)
    def is_valid(self): return _mforms.TreeNodeRef_is_valid(self)
    def equals(self, *args): return _mforms.TreeNodeRef_equals(self, *args)
    def set_icon_path(self, *args): return _mforms.TreeNodeRef_set_icon_path(self, *args)
    def set_string(self, *args): return _mforms.TreeNodeRef_set_string(self, *args)
    def set_int(self, *args): return _mforms.TreeNodeRef_set_int(self, *args)
    def set_long(self, *args): return _mforms.TreeNodeRef_set_long(self, *args)
    def set_bool(self, *args): return _mforms.TreeNodeRef_set_bool(self, *args)
    def set_attributes(self, *args): return _mforms.TreeNodeRef_set_attributes(self, *args)
    def get_string(self, *args): return _mforms.TreeNodeRef_get_string(self, *args)
    def get_int(self, *args): return _mforms.TreeNodeRef_get_int(self, *args)
    def get_long(self, *args): return _mforms.TreeNodeRef_get_long(self, *args)
    def get_bool(self, *args): return _mforms.TreeNodeRef_get_bool(self, *args)
    def count(self): return _mforms.TreeNodeRef_count(self)
    def add_child(self): return _mforms.TreeNodeRef_add_child(self)
    def insert_child(self, *args): return _mforms.TreeNodeRef_insert_child(self, *args)
    def remove_from_parent(self): return _mforms.TreeNodeRef_remove_from_parent(self)
    def remove_children(self): return _mforms.TreeNodeRef_remove_children(self)
    def get_child(self, *args): return _mforms.TreeNodeRef_get_child(self, *args)
    def get_parent(self): return _mforms.TreeNodeRef_get_parent(self)
    def find_child_with_tag(self, *args): return _mforms.TreeNodeRef_find_child_with_tag(self, *args)
    def add_node_collection(self, *args): return _mforms.TreeNodeRef_add_node_collection(self, *args)
    def expand(self): return _mforms.TreeNodeRef_expand(self)
    def collapse(self): return _mforms.TreeNodeRef_collapse(self)
    def is_expanded(self): return _mforms.TreeNodeRef_is_expanded(self)
    def set_tag(self, *args): return _mforms.TreeNodeRef_set_tag(self, *args)
    def get_tag(self): return _mforms.TreeNodeRef_get_tag(self)
    def set_data(self, *args): return _mforms.TreeNodeRef_set_data(self, *args)
    def get_data(self): return _mforms.TreeNodeRef_get_data(self)
TreeNodeRef_swigregister = _mforms.TreeNodeRef_swigregister
TreeNodeRef_swigregister(TreeNodeRef)

class TreeNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def equals(self, *args): return _mforms.TreeNode_equals(self, *args)
    def is_valid(self): return _mforms.TreeNode_is_valid(self)
    def set_icon_path(self, *args): return _mforms.TreeNode_set_icon_path(self, *args)
    def set_string(self, *args): return _mforms.TreeNode_set_string(self, *args)
    def set_int(self, *args): return _mforms.TreeNode_set_int(self, *args)
    def set_long(self, *args): return _mforms.TreeNode_set_long(self, *args)
    def set_bool(self, *args): return _mforms.TreeNode_set_bool(self, *args)
    def set_attributes(self, *args): return _mforms.TreeNode_set_attributes(self, *args)
    def get_string(self, *args): return _mforms.TreeNode_get_string(self, *args)
    def get_int(self, *args): return _mforms.TreeNode_get_int(self, *args)
    def get_long(self, *args): return _mforms.TreeNode_get_long(self, *args)
    def get_bool(self, *args): return _mforms.TreeNode_get_bool(self, *args)
    def count(self): return _mforms.TreeNode_count(self)
    def add_child(self): return _mforms.TreeNode_add_child(self)
    def insert_child(self, *args): return _mforms.TreeNode_insert_child(self, *args)
    def remove_from_parent(self): return _mforms.TreeNode_remove_from_parent(self)
    def remove_children(self): return _mforms.TreeNode_remove_children(self)
    def get_child(self, *args): return _mforms.TreeNode_get_child(self, *args)
    def get_parent(self): return _mforms.TreeNode_get_parent(self)
    def find_child_with_tag(self, *args): return _mforms.TreeNode_find_child_with_tag(self, *args)
    def add_node_collection(self, *args): return _mforms.TreeNode_add_node_collection(self, *args)
    def expand(self): return _mforms.TreeNode_expand(self)
    def collapse(self): return _mforms.TreeNode_collapse(self)
    def is_expanded(self): return _mforms.TreeNode_is_expanded(self)
    def set_tag(self, *args): return _mforms.TreeNode_set_tag(self, *args)
    def get_tag(self): return _mforms.TreeNode_get_tag(self)
    def set_data(self, *args): return _mforms.TreeNode_set_data(self, *args)
    def get_data(self): return _mforms.TreeNode_get_data(self)
    __swig_destroy__ = _mforms.delete_TreeNode
    __del__ = lambda self : None;
TreeNode_swigregister = _mforms.TreeNode_swigregister
TreeNode_swigregister(TreeNode)

class TreeNodeView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeNodeView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TreeNodeView
    __del__ = lambda self : None;
    def add_column(self, *args): return _mforms.TreeNodeView_add_column(self, *args)
    def end_columns(self): return _mforms.TreeNodeView_end_columns(self)
    def get_column_type(self, *args): return _mforms.TreeNodeView_get_column_type(self, *args)
    def clear(self): return _mforms.TreeNodeView_clear(self)
    def root_node(self): return _mforms.TreeNodeView_root_node(self)
    def add_node(self): return _mforms.TreeNodeView_add_node(self)
    def set_selection_mode(self, *args): return _mforms.TreeNodeView_set_selection_mode(self, *args)
    def get_selection_mode(self): return _mforms.TreeNodeView_get_selection_mode(self)
    def get_selection(self): return _mforms.TreeNodeView_get_selection(self)
    def get_selected_node(self): return _mforms.TreeNodeView_get_selected_node(self)
    def get_selected_row(self): return _mforms.TreeNodeView_get_selected_row(self)
    def clear_selection(self): return _mforms.TreeNodeView_clear_selection(self)
    def select_node(self, *args): return _mforms.TreeNodeView_select_node(self, *args)
    def set_node_selected(self, *args): return _mforms.TreeNodeView_set_node_selected(self, *args)
    def row_for_node(self, *args): return _mforms.TreeNodeView_row_for_node(self, *args)
    def node_at_row(self, *args): return _mforms.TreeNodeView_node_at_row(self, *args)
    def node_with_tag(self, *args): return _mforms.TreeNodeView_node_with_tag(self, *args)
    def set_row_height(self, *args): return _mforms.TreeNodeView_set_row_height(self, *args)
    def set_allow_sorting(self, *args): return _mforms.TreeNodeView_set_allow_sorting(self, *args)
    def freeze_refresh(self): return _mforms.TreeNodeView_freeze_refresh(self)
    def thaw_refresh(self): return _mforms.TreeNodeView_thaw_refresh(self)
    def set_context_menu(self, *args): return _mforms.TreeNodeView_set_context_menu(self, *args)
    def get_context_menu(self): return _mforms.TreeNodeView_get_context_menu(self)
    def count(self): return _mforms.TreeNodeView_count(self)
    def add_activated_callback(self, *args): return _mforms.TreeNodeView_add_activated_callback(self, *args)
    def call_activated_callback(self, *args): return _mforms.TreeNodeView_call_activated_callback(self, *args)
    def add_changed_callback(self, *args): return _mforms.TreeNodeView_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TreeNodeView_call_changed_callback(self)
    def set_cell_edited_callback(self, *args): return _mforms.TreeNodeView_set_cell_edited_callback(self, *args)
TreeNodeView_swigregister = _mforms.TreeNodeView_swigregister
TreeNodeView_swigregister(TreeNodeView)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _mforms.Color_red_set
    __swig_getmethods__["red"] = _mforms.Color_red_get
    if _newclass:red = _swig_property(_mforms.Color_red_get, _mforms.Color_red_set)
    __swig_setmethods__["green"] = _mforms.Color_green_set
    __swig_getmethods__["green"] = _mforms.Color_green_get
    if _newclass:green = _swig_property(_mforms.Color_green_get, _mforms.Color_green_set)
    __swig_setmethods__["blue"] = _mforms.Color_blue_set
    __swig_getmethods__["blue"] = _mforms.Color_blue_get
    if _newclass:blue = _swig_property(_mforms.Color_blue_get, _mforms.Color_blue_set)
    __swig_setmethods__["alpha"] = _mforms.Color_alpha_set
    __swig_getmethods__["alpha"] = _mforms.Color_alpha_get
    if _newclass:alpha = _swig_property(_mforms.Color_alpha_get, _mforms.Color_alpha_set)
    def __init__(self, *args): 
        this = _mforms.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __ne__(self, *args): return _mforms.Color___ne__(self, *args)
    def to_html(self): return _mforms.Color_to_html(self)
    def is_valid(self): return _mforms.Color_is_valid(self)
    __swig_getmethods__["parse"] = lambda x: _mforms.Color_parse
    if _newclass:parse = staticmethod(_mforms.Color_parse)
    __swig_getmethods__["Black"] = lambda x: _mforms.Color_Black
    if _newclass:Black = staticmethod(_mforms.Color_Black)
    __swig_getmethods__["White"] = lambda x: _mforms.Color_White
    if _newclass:White = staticmethod(_mforms.Color_White)
    __swig_getmethods__["Invalid"] = lambda x: _mforms.Color_Invalid
    if _newclass:Invalid = staticmethod(_mforms.Color_Invalid)
    __swig_destroy__ = _mforms.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _mforms.Color_swigregister
Color_swigregister(Color)

def Color_parse(*args):
  return _mforms.Color_parse(*args)
Color_parse = _mforms.Color_parse

def Color_Black():
  return _mforms.Color_Black()
Color_Black = _mforms.Color_Black

def Color_White():
  return _mforms.Color_White()
Color_White = _mforms.Color_White

def Color_Invalid():
  return _mforms.Color_Invalid()
Color_Invalid = _mforms.Color_Invalid

class HSVColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSVColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSVColor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _mforms.HSVColor_h_set
    __swig_getmethods__["h"] = _mforms.HSVColor_h_get
    if _newclass:h = _swig_property(_mforms.HSVColor_h_get, _mforms.HSVColor_h_set)
    __swig_setmethods__["s"] = _mforms.HSVColor_s_set
    __swig_getmethods__["s"] = _mforms.HSVColor_s_get
    if _newclass:s = _swig_property(_mforms.HSVColor_s_get, _mforms.HSVColor_s_set)
    __swig_setmethods__["v"] = _mforms.HSVColor_v_set
    __swig_getmethods__["v"] = _mforms.HSVColor_v_get
    if _newclass:v = _swig_property(_mforms.HSVColor_v_get, _mforms.HSVColor_v_set)
    __swig_setmethods__["a"] = _mforms.HSVColor_a_set
    __swig_getmethods__["a"] = _mforms.HSVColor_a_get
    if _newclass:a = _swig_property(_mforms.HSVColor_a_get, _mforms.HSVColor_a_set)
    def __init__(self, *args): 
        this = _mforms.new_HSVColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_HSVColor
    __del__ = lambda self : None;
HSVColor_swigregister = _mforms.HSVColor_swigregister
HSVColor_swigregister(HSVColor)


def fromgrt(*args):
  return _mforms.fromgrt(*args)
fromgrt = _mforms.fromgrt

def togrt(*args):
  return _mforms.togrt(*args)
togrt = _mforms.togrt
class PyDrawBox(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyDrawBox, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyDrawBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_PyDrawBox()
        try: self.this.append(this)
        except: self.this = this
    def set_instance(self, *args): return _mforms.PyDrawBox_set_instance(self, *args)
    __swig_destroy__ = _mforms.delete_PyDrawBox
    __del__ = lambda self : None;
PyDrawBox_swigregister = _mforms.PyDrawBox_swigregister
PyDrawBox_swigregister(PyDrawBox)

class TreeView(TreeNodeView):
    """Compatibility class for old TreeView"""

    def set_string(self, row, col, value):
        if self.get_column_type(col) == IconColumnType:
            self.node_at_row(row).set_icon_path(col, value)
        else:
            self.node_at_row(row).set_string(col, value)
    
    def set_int(self, row, col, value):
        self.node_at_row(row).set_int(col, value)

    def set_bool(self, row, col, value):
        self.node_at_row(row).set_bool(col, value)

    def set_row_tag(self, row, value):
        self.node_at_row(row).set_tag(value)

    set_check = set_bool

    def get_row_tag(self, row):
        return self.node_at_row(row).get_tag()

    def get_string(self, row, col):
        return self.node_at_row(row).get_string(col)

    def get_int(self, row, col):
        return self.node_at_row(row).get_int(col)

    def get_bool(self, row, col):
        return self.node_at_row(row).get_bool(col)

    get_check = get_bool

    def get_selected(self):
        return self.get_selected_row()

    def set_selected(self, row):
        self.select_node(self.node_at_row(row))

    def add_row(self):
        return self.row_for_node(self.add_node())

    def clear_rows(self):
        self.clear()

    def delete_row(self, row):
        node = self.node_at_row(row)
        if node:
            node.remove_from_parent()

    def set_cell_edited_callback(self, callback):
        TreeNodeView.set_cell_edited_callback(self, self.cell_edited)
        self._cell_edited = callback

    def cell_edited(self, node, col, value):
        if self._cell_edited:
            return self._cell_edited(self.row_for_node(node), col, value)


def newTreeView(options):
    return TreeView(options|TreeFlatList)



#class ListBox(TreeNodeView):
#    """Compatibility class for old ListBox"""


# This file is compatible with both classic and new-style classes.


